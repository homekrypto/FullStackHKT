I have critical issues with my agent registration system that need immediate debugging and fixes. Please address all these problems systematically.

**CRITICAL ISSUES TO FIX:**

**1. AGENT REGISTRATION FORM NOT WORKING:**
- Form at /agent-registration is completely broken
- Need to debug and identify what's preventing form submission
- Test complete registration workflow from form to database
- Fix all validation errors and submission issues

**2. PHOTO UPLOAD SPECIFICATIONS UPDATE:**
- Change photo upload requirements to: "Preferred size: 200x200 pixels"
- Update form text to show "Profile Photo (Optional) - Preferred size: 200x200 pixels"
- Maintain file size limit: 5MB max
- Keep formats: .jpg, .jpeg, .png only
- Test photo upload functionality completely

**3. DATABASE FOREIGN KEY CONSTRAINT BLOCKING USER DELETION:**
Current error: "update or delete on table 'users' violates foreign key constraint 'real_estate_agents_approved_by_users_id_fk' on table 'real_estate_agents'"
- Need to fix foreign key relationships
- Allow admin to delete users when necessary
- Implement proper cascade or set null behavior

**SPECIFIC IMPLEMENTATIONS NEEDED:**

**1. DEBUG AGENT REGISTRATION FORM:**
```javascript
// Complete debugging checklist:
- Check form submission handler
- Verify all required fields are properly validated
- Test multipart/form-data handling for photo uploads
- Check API endpoint /api/auth/register
- Verify database connection and insert operations
- Test error handling and user feedback
- Ensure proper redirect after successful registration
2. UPDATE PHOTO UPLOAD REQUIREMENTS:
javascript// Frontend form updates:
- Label: "Profile Photo (Optional) - Preferred size: 200x200 pixels"
- Help text: "Maximum file size: 5MB. Formats: JPG, PNG"
- Add image preview with dimensions display
- Validate uploaded image dimensions (warn if not 200x200)
- Auto-resize or crop to 200x200 if possible
3. FIX DATABASE FOREIGN KEY CONSTRAINTS:
sql-- Current problematic constraint:
-- real_estate_agents_approved_by_users_id_fk references users(id)

-- Fix the foreign key constraint:
ALTER TABLE real_estate_agents 
DROP CONSTRAINT IF EXISTS real_estate_agents_approved_by_users_id_fk;

-- Add new constraint with proper cascade behavior:
ALTER TABLE real_estate_agents 
ADD CONSTRAINT real_estate_agents_approved_by_users_id_fk 
FOREIGN KEY (approved_by) REFERENCES users(id) 
ON DELETE SET NULL ON UPDATE CASCADE;

-- This allows user deletion while setting approved_by to NULL
4. IMPLEMENT USER DELETION FUNCTIONALITY:
javascript// Admin user management endpoint:
DELETE /api/admin/users/:id
- Check if user has dependent records
- Handle foreign key relationships properly
- Set approved_by to NULL for affected agents
- Provide confirmation dialog in admin panel
- Log user deletion for audit purposes
DETAILED DEBUGGING STEPS:
Agent Registration Form Debugging:

Check Frontend Form:

Verify form action and method
Check all input field names and validation
Test form submission with browser dev tools
Verify multipart/form-data encoding for file uploads


Check Backend API:

Test POST /api/auth/register endpoint directly
Verify multer or file upload middleware setup
Check database connection and table structure
Test with and without photo upload


Database Validation:

Verify all required fields are present in schema
Check field types and constraints
Test insert operations manually
Verify auto-increment and default values



Photo Upload Enhancement:
javascript// Frontend photo upload improvements:
const handlePhotoUpload = (file) => {
  // Validate file size (5MB max)
  if (file.size > 5 * 1024 * 1024) {
    alert('File size must be less than 5MB');
    return false;
  }
  
  // Check dimensions and warn if not 200x200
  const img = new Image();
  img.onload = () => {
    if (img.width !== 200 || img.height !== 200) {
      console.warn(`Image is ${img.width}x${img.height}. Preferred size is 200x200`);
    }
  };
  img.src = URL.createObjectURL(file);
  
  // Show preview
  setPhotoPreview(img.src);
};
Database Schema Fixes:
sql-- Check current schema:
SELECT 
    tc.table_name, 
    kcu.column_name, 
    ccu.table_name AS foreign_table_name,
    ccu.column_name AS foreign_column_name,
    tc.constraint_name
FROM information_schema.table_constraints AS tc 
JOIN information_schema.key_column_usage AS kcu
    ON tc.constraint_name = kcu.constraint_name
JOIN information_schema.constraint_column_usage AS ccu
    ON ccu.constraint_name = tc.constraint_name
WHERE tc.constraint_type = 'FOREIGN KEY' 
    AND tc.table_name = 'real_estate_agents';

-- Fix the constraint:
ALTER TABLE real_estate_agents 
DROP CONSTRAINT real_estate_agents_approved_by_users_id_fk;

ALTER TABLE real_estate_agents 
ADD CONSTRAINT real_estate_agents_approved_by_users_id_fk 
FOREIGN KEY (approved_by) REFERENCES users(id) 
ON DELETE SET NULL ON UPDATE CASCADE;
Testing Requirements:
1. Registration Form Testing:

Test form with all required fields
Test form with optional photo upload
Test form without photo upload
Test validation error handling
Test successful registration flow
Verify database record creation

2. Photo Upload Testing:

Test with 200x200 image (should work perfectly)
Test with different dimensions (should warn but accept)
Test with oversized file (should reject)
Test with wrong format (should reject)
Test without photo (should work fine)

3. User Deletion Testing:

Try deleting user who approved agents
Verify agents' approved_by field is set to NULL
Confirm no foreign key constraint errors
Test cascade behavior works correctly

Error Handling Requirements:

Clear error messages for form validation failures
Proper feedback for photo upload issues
Graceful handling of database constraint violations
User-friendly error messages in admin panel

Admin Panel Updates:

Add "Delete User" functionality in admin panel
Show confirmation dialog before user deletion
Display warning if user has approved agents
Update UI after successful deletion

Please implement all these fixes with thorough testing and provide detailed logs of what was broken and how it was fixed. The agent registration form is critical functionality that must work flawlessly."